[
{
	"uri": "//localhost:1313/2-setupenvironment/2.1-cloudformation/",
	"title": "Create CloudFormation stack",
	"tags": [],
	"description": "",
	"content": "\rAWS CloudFormation is a service that helps you model and set up your AWS resources so that you can spend less time managing those resources and more time focusing on your applications that run in AWS. You create a template that describes all the AWS resources that you want (like Amazon EC2 instances or Amazon RDS DB instances), and CloudFormation takes care of provisioning and configuring those resources for you. Read more about AWS CloudFormation.\nDownload CloudFormation template here\nWe will create the workshop\u0026rsquo;s environment by using the prepared CloudFormation template. This template will create a VPC with a specified CIDR block, DNS support, DNS hostnames enabled and these components within:\n3 EC2 instances and security groups The \u0026ldquo;SSMInstanceRole\u0026rdquo; IAM role is created with policies granting permissions for various actions related to Systems Manager (SSM), CloudWatch, S3, EC2, GuardDuty, and other services. 1 Public Subnet is created within the VPC with a specified CIDR block and configured to assign public IP addresses to instances launched in this subnet. 1 Internet Gateway (IGW) is created and attached to the VPC to enable internet access for instances in the public subnet. 1 Route Table is created for the public subnet to route traffic to the internet gateway. A Route is added to the public route table to direct all traffic (0.0.0.0/0) to the internet gateway. If the \u0026ldquo;EnableGuardDuty\u0026rdquo; parameter is set to \u0026ldquo;Yes-Enable GuardDuty,\u0026rdquo; a GuardDuty detector is created with the specified finding publishing frequency. Go to AWS Management Console Search CloudFormation Select CloudFormation In CloudFormation dashboard Click Create button to create a new stack. Choose the options as the image below. Upload the AutomatedIncidentResponseWorkshop.json that you just downloaded. Click Next. In Specify stack details page Enter AutomatedIncidentResponseWorkshop as the name of the stack. Enable GuardDuty. This step is very important for the workshop! Click Next Leave the next page as default and click Next. Roll down to the bottom of the page and tick those 2 checkboxes then choose Submit. Wait about 5 minutes for the stack to complete the creation process. "
},
{
	"uri": "//localhost:1313/3-configureresponse/3.1-rolepolicy/",
	"title": "Create IAM Policy and Role",
	"tags": [],
	"description": "",
	"content": " Go to AWS Console Search for IAM Select it In the IAM Dashboard Select Policies Click Create policy button In the Specify permissions page Choose JSON as the Policy editor Paste these policies and click Next {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;EC2Snapshot\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;,\r\u0026#34;ec2:Describe*\u0026#34;,\r\u0026#34;logs:CreateLogStream\u0026#34;,\r\u0026#34;ec2:CreateSecurityGroup\u0026#34;,\r\u0026#34;ec2:CreateTags\u0026#34;,\r\u0026#34;ec2:CreateSnapshots\u0026#34;,\r\u0026#34;ec2:CreateSnapshot\u0026#34;,\r\u0026#34;ec2:ModifyInstanceAttribute\u0026#34;,\r\u0026#34;ec2:StopInstances\u0026#34;,\r\u0026#34;logs:CreateLogGroup\u0026#34;,\r\u0026#34;logs:PutLogEvents\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r} This policy grant fairly broad permissions related to EC2 and CloudWatch Logs, such as: ec2:AuthorizeSecurityGroupIngress: Allows authorizing inbound (ingress) traffic to a security group in EC2. ec2:Describe: Allows describing (viewing information about) various EC2 resources (instances, snapshots, etc.). logs:CreateLogStream: Allows creating log streams in AWS CloudWatch Logs. ec2:CreateSecurityGroup: Allows creating security groups in EC2. ec2:CreateTags: Allows creating tags for EC2 resources. ec2:CreateSnapshots: Allows creating EBS (Elastic Block Store) snapshots in EC2. ec2:CreateSnapshot: Allows creating individual snapshots in EC2. ec2:ModifyInstanceAttribute: Allows modifying attributes of EC2 instances. ec2:StopInstances: Allows stopping EC2 instances. logs:CreateLogGroup: Allows creating log groups in AWS CloudWatch Logs. logs:PutLogEvents: Allows putting log events into a log stream in AWS CloudWatch Logs. In the Review and create page:\nEnter ec2instance-containment-with-forensics-policy as the Policy\u0026rsquo;s name. Click Create policy In this next step, we are going to create a IAM Role\nSelect Role in the left dashboard. Click Create role button. In the Select trusted entity page:\nSelect AWS service Select Lambda as Use case Click next In the Add permissions page:\nFind the ec2instance-containment-with-forensics-policy that we just created. Select it then click next In the Name, review, and create page:\nEnter ec2instance-containment-with-forensics-role as the Role\u0026rsquo;s name. Scroll to the bottom of the page and click Create role. "
},
{
	"uri": "//localhost:1313/",
	"title": "Incident response",
	"tags": [],
	"description": "",
	"content": "Why Automated Incident Response? Overview In the world of cybersecurity, incidents are an unfortunate reality, like viruses or hackers breaking in. When these things occur, it\u0026rsquo;s crucial to act fast and smart to minimize damage.\nHowever, traditional manual incident response processes isn\u0026rsquo;t always fast enough or good enough. That\u0026rsquo;s where automated incident response comes in.\nThis workshop explores the critical need for automated incident response systems in enhancing cyber resilience, reducing response times, and ultimately fortifying organizations against emerging cyber threats.\nIn this lab, we will gain more knowledge about AWS CloudFormation, EC2, EBS, Lambda, Event Bridge, Duty Guard.\nContent Introduction Setup and configure environment Configure Response Check the result Clean up resources "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this lab, we will develop an automated incident response playbook and implement it upon detection of a compromised instance.\nAn adversary is already inside. Perhaps they leveraged an OS Command injection in an application or exploited another vulnerability and they were able to execute arbitrary code on the instance.\nThe adversary chose to install a TOR Client to reach anonymously a web service on their network and report that they were successful in compromising the instance. Also, they will attempt to perform bitcoin mining, and connect to a known malicious IP address.\nOur job is to configure automated remediation tasks, simulate those attacks, and analyze the result.\nContent Introduction Setup and configure environment Configure Response Check the result Clean up resources "
},
{
	"uri": "//localhost:1313/2-setupenvironment/2.2-securitygroup/",
	"title": "Create Isolated Security Group",
	"tags": [],
	"description": "",
	"content": "\rA security group controls the traffic that is allowed to reach and leave the resources that it is associated with. For example, after you associate a security group with an EC2 instance, it controls the inbound and outbound traffic for the instance. More detail\nSecurity group rule basics\nYou can specify allow rules, but not deny rules. When you first create a security group, it has no inbound rules. Therefore, no inbound traffic is allowed until you add inbound rules to the security group. When you first create a security group, it has an outbound rule that allows all outbound traffic from the resource. You can remove the rule and add outbound rules that allow specific outbound traffic only. If your security group has no outbound rules, no outbound traffic is allowed. When you associate multiple security groups with a resource, the rules from each security group are aggregated to form a single set of rules that are used to determine whether to allow access. When you add, update, or remove rules, your changes are automatically applied to all resources associated with the security group. The effect of some rule changes can depend on how the traffic is tracked. For more information, see Connection tracking in the Amazon EC2 User Guide for Linux Instances. When you create a security group rule, AWS assigns a unique ID to the rule. You can use the ID of a rule when you use the API or CLI to modify or delete the rule. Go to AWS Management Console Find EC2 Select EC2 In EC2 dashboard Find Security Groups Select Security Groups In Security Groups interface Click Create security group Fill out the boxes Enter IsolatedSG as the name Fill the description Choose the VPC-AutomatedIncidentResponseWorkshop created by CloudFormation Delete all Outbound rules Add this entry to Inbound rules: Type: SSH, Source: My IP Click Create security group This image below show Workshop\u0026rsquo;s Security group is created succesfully. You will need copy the Security group ID and then save it for the step 3.2.4 . "
},
{
	"uri": "//localhost:1313/3-configureresponse/3.2-createlambda/",
	"title": "Create Lambda function",
	"tags": [],
	"description": "",
	"content": "\rAWS Lambda is a compute service that runs your code in response to events and automatically manages the compute resources, making it the fastest way to turn an idea into a modern, production, serverless applications. You organize your code into Lambda functions. The Lambda service runs your function only when needed and scales automatically. You only pay for the compute time that you consume—there is no charge when your code is not running. Read more about AWS Lambda.\nChúng ta vừa tạo một IAM Role, bây giờ chúng ta sẽ tạo một hàm Lambda và gắn Role đó vào nó.\nTrong Bảng điều khiển quản lý AWS Tìm kiếm Lambda Chọn nó Tạo hàm Lambda với những thông tin sau: Tên hàm: ec2instance-containment-with-forensics Chọn Python 3.9 làm Runtime Chọn ec2instance-containment-with-forensics-role làm vai trò thực thi Bấm vào nút Create function Trong bảng thông tin Lambda: Đi xuống Configuration -\u0026gt; General configuration Chỉnh sửa Timeout thành 15 phút Chọn cài đặt Environment variables, sau đó thêm mục này. Key: IsolatedSG Giá trị: ID nhóm bảo mật bạn đã lưu ở bước 2.2.4 "
},
{
	"uri": "//localhost:1313/2-setupenvironment/",
	"title": "Setup and configure the environment",
	"tags": [],
	"description": "",
	"content": "In this module, we will use AWS CloudFormation to simulate the workshop\u0026rsquo;s environment.\nContent Introduction Setup and configure environment Create Lambda response Check the result Clean up resources "
},
{
	"uri": "//localhost:1313/2-setupenvironment/2.3-ec2instance/",
	"title": "Check the stack status before the incident",
	"tags": [],
	"description": "",
	"content": "In this step, we will check the status of every services created in the stack before the incident occurs.\nThere are three EC2 instances created. The red team instance is where the adversary contained. It will target the BasicLinux instance to simulate five types of common attacks. Check the termination protection setting of RedTeam instance and BasicLinux instance. You can see that the Termination protection is not being enabled. Check the Security group assigned to each EC2 instance. There is no EBS Snapshot created. "
},
{
	"uri": "//localhost:1313/3-configureresponse/",
	"title": "Configure Response",
	"tags": [],
	"description": "",
	"content": "In this module, we will create a Lambda function in order to protect the compromised EC2 instance by isolating them and turning on the termination protection. This Lambda function is triggered by the Event Bridge\u0026rsquo;s rules if they match any CWE findings that was found by Guard Duty.\nContent Introduction Setup and configure environment Create Lambda response Check the result Clean up resources "
},
{
	"uri": "//localhost:1313/3-configureresponse/3.3-testlambda/",
	"title": "Test Lambda function",
	"tags": [],
	"description": "",
	"content": "After configurating the Lambda function successfully, now we will test it.\nGoes into the Code section, paste this piece of code and then click Deploy: import boto3, json\rimport time\rfrom datetime import date\rfrom botocore.exceptions import ClientError\rimport os\rdef lambda_handler(event, context):\rresponse = \u0026#39;Error remediating the security finding.\u0026#39;\rtry:\r# Gather Instance ID from CloudWatch event\rinstanceID = event[\u0026#39;detail\u0026#39;][\u0026#39;resource\u0026#39;][\u0026#39;instanceDetails\u0026#39;][\u0026#39;instanceId\u0026#39;]\rprint(\u0026#39;## INSTANCE ID: %s\u0026#39; % (instanceID))\r# Get instance details\rclient = boto3.client(\u0026#39;ec2\u0026#39;)\rec2 = boto3.resource(\u0026#39;ec2\u0026#39;)\rinstance = ec2.Instance(instanceID)\rinstance_description = client.describe_instances(InstanceIds=[instanceID])\rprint(\u0026#39;## INSTANCE DESCRIPTION: %s\u0026#39; % (instance_description))\r#-------------------------------------------------------------------\r# Protect instance from termination\r#-------------------------------------------------------------------\rec2.Instance(instanceID).modify_attribute(\rDisableApiTermination={\r\u0026#39;Value\u0026#39;: True\r})\rec2.Instance(instanceID).modify_attribute(\rInstanceInitiatedShutdownBehavior={\r\u0026#39;Value\u0026#39;: \u0026#39;stop\u0026#39;\r})\r#-------------------------------------------------------------------\r# Create tags to avoid accidental deletion of forensics evidence\r#-------------------------------------------------------------------\rec2.create_tags(Resources=[instanceID], Tags=[{\u0026#39;Key\u0026#39;:\u0026#39;status\u0026#39;, \u0026#39;Value\u0026#39;:\u0026#39;isolated\u0026#39;}])\rprint(\u0026#39;## INSTANCE TAGS: %s\u0026#39; % (instance.tags))\r#------------------------------------\r## Isolate Instance\r#------------------------------------\rprint(\u0026#39;quarantining instance -- %s, %s\u0026#39; % (instance.id, instance.instance_type))\r# Change instance Security Group attribute to terminate connections and allow Forensics Team\u0026#39;s access\rinstance.modify_attribute(Groups=[os.environ[\u0026#39;IsolatedSG\u0026#39;]])\rprint(\u0026#39;Instance ready for root cause analysis -- %s, %s\u0026#39; % (instance.id, instance.security_groups))\r#------------------------------------\r## Create snapshots of EBS volumes #------------------------------------\rdescription= \u0026#39;Isolated Instance:\u0026#39; + instance.id + \u0026#39; on account: \u0026#39; + event[\u0026#39;detail\u0026#39;][\u0026#39;accountId\u0026#39;] + \u0026#39; on \u0026#39; + date.today().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;)\rSnapShotDetails = client.create_snapshots(\rDescription=description,\rInstanceSpecification = {\r\u0026#39;InstanceId\u0026#39;: instanceID,\r\u0026#39;ExcludeBootVolume\u0026#39;: False\r}\r)\rprint(\u0026#39;Snapshot Created -- %s\u0026#39; % (SnapShotDetails))\rresponse = \u0026#39;Instance \u0026#39; + instance.id + \u0026#39; auto-remediated\u0026#39; except ClientError as e:\rprint(e)\rreturn response Create a test event:\nHover to the Test button Choose Configure test event Fill out the boxes with these information:\nEvent name: GuardDutyViaCWE Paste this code into the Event JSON and change some variables: Replace the AccountID for yours. Replace the Instance ID with the ID of the BasicLinuxTarget instance deployed by the CloudFormation template. {\r\u0026#34;version\u0026#34;: \u0026#34;0\u0026#34;,\r\u0026#34;id\u0026#34;: \u0026#34;cd2d702e-ab31-411b-9344-793ce56b1bc7\u0026#34;,\r\u0026#34;detail-type\u0026#34;: \u0026#34;GuardDuty Finding\u0026#34;,\r\u0026#34;source\u0026#34;: \u0026#34;aws.guardduty\u0026#34;,\r\u0026#34;account\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;\u0026#34;,\r\u0026#34;time\u0026#34;: \u0026#34;1970-01-01T00:00:00Z\u0026#34;,\r\u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;,\r\u0026#34;resources\u0026#34;: [],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;schemaVersion\u0026#34;: \u0026#34;2.0\u0026#34;,\r\u0026#34;accountId\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;\u0026#34;,\r\u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;,\r\u0026#34;partition\u0026#34;: \u0026#34;aws\u0026#34;,\r\u0026#34;id\u0026#34;: \u0026#34;b0baa89de4ab301f8d0a8c9a3dfd5726\u0026#34;,\r\u0026#34;arn\u0026#34;: \u0026#34;arn:aws:guardduty:us-east-1:\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;:detector/feb3c048238f682b8902532ec100b3fb/finding/b0baa89de4ab301f8d0a8c9a3dfd5726\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;UnauthorizedAccess:EC2/TorClient\u0026#34;,\r\u0026#34;resource\u0026#34;: {\r\u0026#34;instanceDetails\u0026#34;: {\r\u0026#34;instanceId\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Instance ID\u0026gt;\u0026gt;\u0026#34;\r}\r}\r}\r} This test event is a simulated finding from AWS GuardDuty, indicating unauthorized access to an EC2 instance from a Tor client. Click Save button Test the Lambda funtion\nClick the Test button, the output will be like this if the test is successful: Explaination\nThis Lambda function is designed to automatically respond to a security finding related to an EC2 instance. Here\u0026rsquo;s a brief summary:\nThe function starts by gathering the instance ID from the CloudWatch event. It then retrieves details about the instance using the Boto3 library. If this Lambda function detects compromised instance, it takes several remediation steps: Disables the instance\u0026rsquo;s ability to be terminated via the API. Sets the instance\u0026rsquo;s shutdown behavior to \u0026ldquo;stop\u0026rdquo; instead of \u0026ldquo;terminate.\u0026rdquo; Adds a tag to the instance to indicate it\u0026rsquo;s in an isolated status. Adjusts the instance\u0026rsquo;s security group to terminate connections and allow access for a forensics team. Creates snapshots of the instance\u0026rsquo;s EBS volumes for forensic analysis. If any errors occur during the remediation process, they are caught and logged. The function returns a response indicating whether the instance was successfully auto-remediated or if an error occurred. Overall, this function aims to automatically respond to security findings by isolating and preserving evidence from the affected EC2 instance.\n"
},
{
	"uri": "//localhost:1313/4-checkresult/",
	"title": "Check the result",
	"tags": [],
	"description": "",
	"content": "In this module, we will check the result of the Automated incident response. Wait about 10-15 minutes for GuardDuty updates findings.\nGo to GuardDuty dashboard and select Findings, you will see there are 5 CWE that have been detected by GuardDuty. This will automatically trigger the Lambda function to isolate and make a snapshot of the EC2 instance. Go to EC2 dashboard\nCheck the BasicLinuxTarget\u0026rsquo;s Security Group has been changed to IsolatedSG. Check the termination of the BasicLinuxTarget instance and RedTeam instance, now they have been enabled to prevent from being deleted. Navigate to Snapshots section, there is a EBS Snapshot created. The Automated incident response did the job successfully!\nContent Introduction Setup and configure environment Create Lambda response Check the result Clean up resources "
},
{
	"uri": "//localhost:1313/3-configureresponse/3.4-eventbridge/",
	"title": "Create EventBridge rule",
	"tags": [],
	"description": "",
	"content": "\rEventBridge is a serverless service that uses events to connect application components together, making it easier for you to build scalable event-driven applications. EventBridge provides simple and consistent ways to ingest, filter, transform, and deliver events so you can build applications quickly. Read more about AWS EventBridge.\nAt the AWS Management Console\nSearch for Event buses Select it In the EventBridge dashboard\nSelect Rules Click on Create rule button In the Define rule detail page\nName: compromised-instance-remediation Description: Triggers automated incident response Select Rule with an event pattern and then Next Leave everything as default and scroll down to the bottom of the page.\nChoose Custome pattern as Creation method At Event pattern, paste this piece of code: {\r\u0026#34;source\u0026#34;: [\u0026#34;aws.guardduty\u0026#34;],\r\u0026#34;detail\u0026#34;: {\r\u0026#34;type\u0026#34;: [\u0026#34;UnauthorizedAccess:EC2/TorClient\u0026#34;, \u0026#34;Backdoor:EC2/C\u0026amp;CActivity.B!DNS\u0026#34;, \u0026#34;Trojan:EC2/DNSDataExfiltration\u0026#34;, \u0026#34;CryptoCurrency:EC2/BitcoinTool.B\u0026#34;, \u0026#34;CryptoCurrency:EC2/BitcoinTool.B!DNS\u0026#34;]\r}\r} Click Next In the Select target page: Select AWS Service. Choose Lambda function. Select ec2-instance-containment-with-forensics we create at step 3.3. Skip to the last page and click Create "
},
{
	"uri": "//localhost:1313/5-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Delete the resources by this order:\nUncheck the Termination protection of BasicLinux instance and RedTeam instance. Delete the Snapshot. Delete the CloudFormation stack, this process will take about 10 minutes to complete. Check if Amazon GuardDuty was disabled automatically or you need to disable it manually. Go to the GuardDuty console Click on Settings (on the left navigation menu) Scroll down Click Disable GuardDuty Delete the EventBuses Rule Delete the Lambda function Delete the IAM Policy, IAM Role and the Isolated Security group. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]